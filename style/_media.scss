@use "abstracts/fonts";
@use "abstracts/looks";
@use "abstracts/space";

popover.media {
  padding: 1.5rem;

  stackswitcher {
    padding: 0 10rem;
  }

  .title {
    margin-bottom: 0.25em; // reduce
  }
}

.cava trough {
  border-radius: 6px 6px 0 0;
  min-width: 1.95em;
  min-height: 12em;
  background-color: transparent;

  highlight,
  block.filled {
    border-radius: 6px 6px 0 0;
    border: 1px solid rgb(from var(--base) r g b / 0.1);
    border-bottom: 0;

    $color1: hsl(from var(--primary-bright) h s 90% / 0.85);
    $color2: rgb(from var(--primary) r g b / 0.85);
    $color3: rgb(from var(--primary-dim) r g b / 0.85);
    background-image: linear-gradient($color1 30%, $color2 70%, $color3);
  }
}

.cava-toggler {
  margin: 0.5em;
  color: var(--string);

  image {
    filter: drop-shadow(0 0 1px rgb(from var(--base) r g b / 1));
  }
}

.cover-art-container {
  margin: 1.5em 0;
}
.cover-art-box {
  min-height: 24rem;
  min-width: 24rem;

  &.placeholder {
    @include looks.radius;
    background-color: var(--box);
  }
}
.cover-art {
  @include looks.radius(0.5);
}

.media-artist {
  @include fonts.menu-size;
}

.media-progress {
  margin: 1.5rem 0 0.75rem;

  trough {
    margin: 0 0.5rem;

    highlight {
      background-color: var(--primary);
    }
  }

  .position,
  .length {
    @include fonts.font-size;
  }
}

.media-actions {
  padding: 0 2.5rem;

  image {
    @include fonts.menu-size(1.15);
  }

  button {
    @include space.mx(0.25em);
    padding: 1.25em;

    &:focus,
    &:hover {
      color: var(--primary-bright);
      background-color: transparent;
    }

    &.play-pause {
      @include looks.transition;

      background-color: var(--box);
      color: var(--primary-bright);

      &:hover {
        color: var(--base);
        background-color: var(--primary);
      }
    }

    // Make them less noticable
    &.loop,
    &.shuffle {
      margin: 0 0.5rem;
      color: var(--string-dim);

      &:hover {
        color: var(--primary-bright);
      }

      &.off {
        color: rgb(from var(--string-dim) r g b / 0.75);
      }
    }
  }
}
